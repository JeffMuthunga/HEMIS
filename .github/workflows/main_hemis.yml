name: Build and deploy Docker container to Azure Web App - hemis

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - uses: actions/checkout@v4

      # Step 2: Log in to Azure Container Registry (ACR)
      - name: Log in to ACR
        uses: azure/docker-login@v1
        with:
          login-server: crvtdfxkgx6qofq.azurecr.io
          username: crvtdfxkgx6qofq
          password: jYmyVGONN0WEFX2s8yfpeBXYva6Pu/f1eXDBnA4wEy+ACRCmdDfh

      # Step 3: Build and push the Docker image
      - name: Build and push Docker image
        run: |
          docker build -t crvtdfxkgx6qofq.azurecr.io/hemis:latest .
          docker push crvtdfxkgx6qofq.azurecr.io/hemis:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      # Step 1: Log in to Azure
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_127907B72C3C4E50BAFD72FE9A02DB4A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_005F8E1EBBC14AAC953FEF505616BEF2 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_FDDD304819DE4F899DB99C46B4B990FF }}

      # Step 2: Configure the Web App to use the container from ACR
      - name: Configure Azure Web App for Containers
        run: |
          az webapp config container set \
            --resource-group hemis \
            --name hemis \
            --docker-custom-image-name crvtdfxkgx6qofq.azurecr.io/hemis:latest \
            --docker-registry-server-url https://crvtdfxkgx6qofq.azurecr.io \
            --docker-registry-server-user crvtdfxkgx6qofq \
            --docker-registry-server-password jYmyVGONN0WEFX2s8yfpeBXYva6Pu/f1eXDBnA4wEy+ACRCmdDfh

      # Step 3: Restart the Azure Web App
      - name: Restart Web App
        run: |
          az webapp restart --resource-group hemis --name hemis
